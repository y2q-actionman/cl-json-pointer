(in-package :cl-json-pointer/test)

(1am:test test-clone-and-replace-on-cons
  (let ((list0 (list 0 1 2 3 4 5)))
    (1am:is (equal (cl-json-pointer::clone-and-replace-on-cons list0 (nthcdr 0 list0) 'a)
                   '(a 1 2 3 4 5)))
    (1am:is (equal (cl-json-pointer::clone-and-replace-on-cons list0 (nthcdr 1 list0) 'a)
                   '(0 a 2 3 4 5)))
    (1am:is (equal (cl-json-pointer::clone-and-replace-on-cons list0 (nthcdr 3 list0) 'a)
                   '(0 1 2 a 4 5)))
    (1am:is (equal (cl-json-pointer::clone-and-replace-on-cons list0 (nthcdr 5 list0) 'a)
                   '(0 1 2 3 4 a)))
    (1am:signals type-error
      (cl-json-pointer::clone-and-replace-on-cons list0 999 'xxxa))
    ;; Use nil.
    (1am:is (equal (cl-json-pointer::clone-and-replace-on-cons list0 nil 'nil-replaced)
                   '(0 1 2 3 4 5 nil-replaced)))
    (1am:is (equal (cl-json-pointer::clone-and-replace-on-cons nil (list 1 2) 'nil-replaced)
                   '(nil-replaced 2)))
    (1am:is (equal (cl-json-pointer::clone-and-replace-on-cons nil nil 'nil-replaced)
                   '(nil-replaced)))
    ;; Another cons.
    (1am:is (equal (cl-json-pointer::clone-and-replace-on-cons list0 (cons 5 nil) 'a)
                   '(0 1 2 3 4 5 a)))
    (1am:is (equal (cl-json-pointer::clone-and-replace-on-cons list0 (list #\a #\b #\c) 'head)
                   '(0 1 2 3 4 5 head #\b #\c)))
    ;; Dotted list.
    (1am:signals error
      (1am:is (equal (cl-json-pointer::clone-and-replace-on-cons (list* 1 2 3) (cons 5 nil) 'a)
                     '(0 1 2 3 4 5 a))))
    t))

(1am:test test-remove-cons
  (let ((list0 (list 0 1 2 3 4 5)))
    (1am:is (equal (cl-json-pointer::remove-cons list0 (nthcdr 0 list0))
                   '(1 2 3 4 5)))
    (1am:is (equal (cl-json-pointer::remove-cons list0 (nthcdr 0 list0) 3)
                   '(3 4 5)))
    (1am:is (equal (cl-json-pointer::remove-cons list0 (nthcdr 0 list0) 999)
                   nil))
    (1am:is (equal (cl-json-pointer::remove-cons list0 (nthcdr 1 list0))
                   '(0 2 3 4 5)))
    (1am:is (equal (cl-json-pointer::remove-cons list0 (nthcdr 3 list0))
                   '(0 1 2 4 5)))
    (1am:is (equal (cl-json-pointer::remove-cons list0 (nthcdr 3 list0) 2)
                   '(0 1 2 5)))
    (1am:is (equal (cl-json-pointer::remove-cons list0 (nthcdr 3 list0) 3)
                   '(0 1 2)))
    (1am:is (equal (cl-json-pointer::remove-cons list0 (nthcdr 5 list0))
                   '(0 1 2 3 4)))
    (1am:signals type-error
      (cl-json-pointer::remove-cons list0 'xxx))
    ;; Use nil.
    (1am:is (equal (cl-json-pointer::remove-cons list0 nil)
                   list0))
    (1am:is (equal (cl-json-pointer::remove-cons nil (list 1 2))
                   '(2)))
    (1am:is (equal (cl-json-pointer::remove-cons nil (list 1 2) 10)
                   nil))
    (1am:is (equal (cl-json-pointer::remove-cons nil nil)
                   nil))
    ;; Another cons.
    (1am:is (equal (cl-json-pointer::remove-cons list0 (cons 5 nil))
                   '(0 1 2 3 4 5)))
    (1am:is (equal (cl-json-pointer::remove-cons list0 (list #\a #\b #\c))
                   '(0 1 2 3 4 5 #\b #\c)))
    (1am:is (equal (cl-json-pointer::remove-cons list0 (list #\a #\b #\c) 2)
                   '(0 1 2 3 4 5 #\c)))
    (1am:is (equal (cl-json-pointer::remove-cons list0 (list #\a #\b #\c) 999)
                   '(0 1 2 3 4 5)))
    ;; Dotted list
    (1am:is (equal (cl-json-pointer::remove-cons (list* 0 1 2 3 4 5) (cons 5 nil))
                   '(0 1 2 3 4)))
    (1am:is (equal (cl-json-pointer::remove-cons (list* 0 1 2 3 4 5) (list #\a #\b #\c))
                   '(0 1 2 3 4 #\b #\c)))
    (1am:is (equal (cl-json-pointer::remove-cons (list* 0 1 2 3 4 5) (list* #\a #\b #\c))
                   '(0 1 2 3 4 #\b . #\c)))
    t))

(1am:test test-delete-cons
  (let ((list0 (list 0 1 2 3 4 5)))
    (let ((ret1 (cl-json-pointer::delete-cons list0 (nthcdr 1 list0))))
      (1am:is (equal ret1 '(0 2 3 4 5)))
      (1am:is (eq ret1 list0))))
  (macrolet ((with-tmplist (&body body)
               `(let ((* (list 0 1 2 3 4 5)))
                  ,@body))
             (with-tmplist-per-form (&body forms)
               (loop for f in forms
                     collect `(with-tmplist ,f) into xforms
                     finally (return `(progn ,@xforms)))))
    (with-tmplist-per-form
        (1am:is (equal (cl-json-pointer::delete-cons * (nthcdr 0 *))
                       '(1 2 3 4 5)))
      (1am:is (equal (cl-json-pointer::delete-cons * (nthcdr 0 *) 3)
                     '(3 4 5)))
      (1am:is (equal (cl-json-pointer::delete-cons * (nthcdr 0 *) 999)
                     nil))
      (1am:is (equal (cl-json-pointer::delete-cons * (nthcdr 1 *))
                     '(0 2 3 4 5)))
      (1am:is (equal (cl-json-pointer::delete-cons * (nthcdr 3 *))
                     '(0 1 2 4 5)))
      (1am:is (equal (cl-json-pointer::delete-cons * (nthcdr 3 *) 2)
                     '(0 1 2 5)))
      (1am:is (equal (cl-json-pointer::delete-cons * (nthcdr 3 *) 3)
                     '(0 1 2)))
      (1am:is (equal (cl-json-pointer::delete-cons * (nthcdr 5 *))
                     '(0 1 2 3 4)))
      (1am:signals type-error
        (cl-json-pointer::delete-cons * 'xxx))
      ;; Use nil.
      (1am:is (equal (cl-json-pointer::delete-cons * nil)
                     *))
      (1am:is (equal (cl-json-pointer::delete-cons nil (list 1 2 3))
                     '(2 3)))
      (1am:is (equal (cl-json-pointer::delete-cons nil (list 1 2))
                     '(2)))
      (1am:is (equal (cl-json-pointer::delete-cons nil (list 1 2) 10)
                     nil))
      (1am:is (equal (cl-json-pointer::delete-cons nil nil)
                     nil))
      ;; Another cons.
      (1am:is (equal (cl-json-pointer::delete-cons * (cons 5 nil))
                     '(0 1 2 3 4 5)))
      (1am:is (equal (cl-json-pointer::delete-cons * (list #\a #\b #\c))
                     '(0 1 2 3 4 5 #\b #\c)))
      (1am:is (equal (cl-json-pointer::delete-cons * (list #\a #\b #\c) 2)
                     '(0 1 2 3 4 5 #\c)))
      (1am:is (equal (cl-json-pointer::delete-cons * (list #\a #\b #\c) 999)
                     '(0 1 2 3 4 5)))
      ;; Dotted list
      (1am:is (equal (cl-json-pointer::delete-cons (list* 0 1 2 3 4 5) (cons 5 nil))
                     '(0 1 2 3 4)))
      (1am:is (equal (cl-json-pointer::delete-cons (list* 0 1 2 3 4 5) (list #\a #\b #\c))
                     '(0 1 2 3 4 #\b #\c)))
      (1am:is (equal (cl-json-pointer::delete-cons (list* 0 1 2 3 4 5) (list* #\a #\b #\c))
                     '(0 1 2 3 4 #\b . #\c)))
      t)))
