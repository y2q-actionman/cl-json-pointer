* DONE JS json lib を読む

- [X] https://github.com/janl/node-jsonpointer
- [X] https://github.com/alexeykuzmin/jsonpointer.js

** DONE json pointer tools

https://github.com/manuelstofer/json-pointer

- [X] get
- [X] set
- [X] remove :: =delete=
- [ ] dict
- [ ] walk
- [X] has :: =exists-p=
- [ ] escape
- [ ] unescape
- [X] parse
- [ ] compile
- [ ] pointer
    
- read test code

** DONE json-pointer-rfc6901

https://github.com/WHenderson/json-pointer-rfc6901

- [X] get
- [X] set
- [X] has :: =exists-p=
- [X] del :: =delete=
- [ ] escape
- [ ] escapeFragment
- [ ] unescape
- [ ] unescapeFragment
- [ ] isPointer
- [ ] isFragment
- [X] parse
- [X] parsePointer :: key =:accept-uri-fragment=
- [X] parseFragment :: key =:accept-uri-fragment=
- [ ] compile
- [ ] compilePointer
- [ ] compileFragment
- [ ] pointer
- [ ] smartBind

- read test code

* DONE common lisp json lib 対応
 https://sites.google.com/site/sabraonthehill/home/json-libraries

- [X] cl-json
- [X] st-json
- [X] yason
- [X] jsown
- [X] jonathan
- [X] json-streams
- [X] comgigamonkeys.json

* TODO : json query

- https://github.com/sagold/json-query

* DONE 深く考えずに condition なげまくるか？(しない)

- get -> 経路がなければ error なげる。値 nil が返されるなら、それは nil があったということ。
- exists -> 上と同じだが、 muffle-warning する。
- set -> 経路がなければ error なげる。さらに、set時にerrorする可能性がある。

よく考えたら、 get の時の戻り値は set では使わない。
なので、何を返すかを完全に set-method で決める？

=list-try-traverse= で exists を使ったりしてるので、たぶんあった方がいい。


* DONE setter, deleter は修正後objectを返す
ようにしないと root object 変更時に失敗する

* DONE deleter は setter と統合。
  deleter に特殊symbolが来たら delete する。
  deleter した結果は、 setter を呼ぶ形で上に投げないといけない。

* DONE set って 破壊的 update っぽい。
  破壊的でない set は、 add という名前にして別にする？

* DONE setter は何度呼ばれるか
一応 setter が複数回呼ばれることを想定しているが、 alist や plist で
cons を扱っていて、これだと複数回呼んでも意味がなさそう。何を closure
に掴ませるかという設定の話になるが。


* TODO alist の key に数値があったらどうするのか問題

* TODO alist の key を intern する方法

* TODO user が書いた list を食えるようにする。

- reference token として symbol や int を受け入れる
- parser が解決済みの値を返すか、それとも今のように曖昧な string として判断を遅延させるか。
* DONE deletef 的なものを足す。
  test4 で使える。

* TODO access を使う。
https://github.com/AccelerationNet/access/
